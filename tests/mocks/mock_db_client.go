// Code generated by mockery v2.43.0. DO NOT EDIT.

package dbmock

import (
	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// DBTransactionClient is an autogenerated mock type for the DBTransactionClient type
type DBTransactionClient struct {
	mock.Mock
}

// StartSession provides a mock function with given fields: opts
func (_m *DBTransactionClient) StartSession(opts ...*options.SessionOptions) (mongo.Session, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSession")
	}

	var r0 mongo.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(...*options.SessionOptions) (mongo.Session, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...*options.SessionOptions) mongo.Session); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(...*options.SessionOptions) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDBTransactionClient creates a new instance of DBTransactionClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBTransactionClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBTransactionClient {
	mock := &DBTransactionClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
